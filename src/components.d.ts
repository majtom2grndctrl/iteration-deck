/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IterationDeck {
        "deckId": string;
        "description"?: string;
        "extractSlideData": () => Promise<void>;
        "label"?: string;
        "prompt"?: string;
        "registerWithStore": () => Promise<void>;
    }
    interface IterationDeckSlide {
        "aiPrompt"?: string;
        "confidence"?: number;
        "label": string;
        "notes"?: string;
    }
    interface IterationDeckTest {
        /**
          * @default 'Hello from Stencil!'
         */
        "message": string;
    }
    interface IterationDeckToolbar {
    }
}
export interface IterationDeckSlideCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIterationDeckSlideElement;
}
declare global {
    interface HTMLIterationDeckElement extends Components.IterationDeck, HTMLStencilElement {
    }
    var HTMLIterationDeckElement: {
        prototype: HTMLIterationDeckElement;
        new (): HTMLIterationDeckElement;
    };
    interface HTMLIterationDeckSlideElementEventMap {
        "slideDataUpdated": {
    label: string;
    aiPrompt?: string;
    notes?: string;
    confidence?: number;
  };
    }
    interface HTMLIterationDeckSlideElement extends Components.IterationDeckSlide, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIterationDeckSlideElementEventMap>(type: K, listener: (this: HTMLIterationDeckSlideElement, ev: IterationDeckSlideCustomEvent<HTMLIterationDeckSlideElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIterationDeckSlideElementEventMap>(type: K, listener: (this: HTMLIterationDeckSlideElement, ev: IterationDeckSlideCustomEvent<HTMLIterationDeckSlideElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIterationDeckSlideElement: {
        prototype: HTMLIterationDeckSlideElement;
        new (): HTMLIterationDeckSlideElement;
    };
    interface HTMLIterationDeckTestElement extends Components.IterationDeckTest, HTMLStencilElement {
    }
    var HTMLIterationDeckTestElement: {
        prototype: HTMLIterationDeckTestElement;
        new (): HTMLIterationDeckTestElement;
    };
    interface HTMLIterationDeckToolbarElement extends Components.IterationDeckToolbar, HTMLStencilElement {
    }
    var HTMLIterationDeckToolbarElement: {
        prototype: HTMLIterationDeckToolbarElement;
        new (): HTMLIterationDeckToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "iteration-deck": HTMLIterationDeckElement;
        "iteration-deck-slide": HTMLIterationDeckSlideElement;
        "iteration-deck-test": HTMLIterationDeckTestElement;
        "iteration-deck-toolbar": HTMLIterationDeckToolbarElement;
    }
}
declare namespace LocalJSX {
    interface IterationDeck {
        "deckId": string;
        "description"?: string;
        "label"?: string;
        "prompt"?: string;
    }
    interface IterationDeckSlide {
        "aiPrompt"?: string;
        "confidence"?: number;
        "label": string;
        "notes"?: string;
        "onSlideDataUpdated"?: (event: IterationDeckSlideCustomEvent<{
    label: string;
    aiPrompt?: string;
    notes?: string;
    confidence?: number;
  }>) => void;
    }
    interface IterationDeckTest {
        /**
          * @default 'Hello from Stencil!'
         */
        "message"?: string;
    }
    interface IterationDeckToolbar {
    }
    interface IntrinsicElements {
        "iteration-deck": IterationDeck;
        "iteration-deck-slide": IterationDeckSlide;
        "iteration-deck-test": IterationDeckTest;
        "iteration-deck-toolbar": IterationDeckToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "iteration-deck": LocalJSX.IterationDeck & JSXBase.HTMLAttributes<HTMLIterationDeckElement>;
            "iteration-deck-slide": LocalJSX.IterationDeckSlide & JSXBase.HTMLAttributes<HTMLIterationDeckSlideElement>;
            "iteration-deck-test": LocalJSX.IterationDeckTest & JSXBase.HTMLAttributes<HTMLIterationDeckTestElement>;
            "iteration-deck-toolbar": LocalJSX.IterationDeckToolbar & JSXBase.HTMLAttributes<HTMLIterationDeckToolbarElement>;
        }
    }
}
